name: Build and Push to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 544234170512.dkr.ecr.us-east-1.amazonaws.com/gitlab-runner-repo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::544234170512:role/GithubRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./docker
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG  .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REPOSITORY:latest
  
    - name: Get Current Task Definition
      run: |
            aws ecs describe-task-definition --task-definition gitlab-task --query taskDefinition --output json > task-def.json

    - name: Set Image Tag
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
            jq --arg newTag "$IMAGE_TAG" \
            'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | 
            .containerDefinitions[0].image = "544234170512.dkr.ecr.us-east-1.amazonaws.com/gitlab-runner-repo:" + $newTag' \
            task-def.json > updated-task-def.json
            cat updated-task-def.json

    - name: Register New Task Definition
      run: |
            aws ecs register-task-definition --cli-input-json file://updated-task-def.json

    - name: Update ECS Service
      run: |
            aws ecs update-service --cluster gitlab-runner-cluster --service gitlab-service  --force-new-deployment
